name: End-to-end test
on:
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - feature/*
      - bugfix/*
  push:
    branches:
      - master
      - feature/*
      - releases/*
    paths-ignore:
      - '**.md'

# node set up

jobs:
  node-setup-lint-check:
    name: set up node and yarnv${{ matrix.node }}
    runs-on: ubuntu-latest
    outputs:
       logurl_node_setup: ${{ steps.log_url_with_status.outputs.log_url }}
       branch: ${{ steps.log_url_with_status.outputs.branch }}
       status: ${{ steps.log_url_with_status.outputs.status }}
       lint_output: ${{ steps.run_lint.outputs.lint_output }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 0
      - name: Setup Node ${{ matrix.node-version }}
        if: ${{ success() }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: |
         echo "check for node"
#         node -v
#      - name: exiting from process
#        id: exit_process
#        run: |
#           exit 1
      - name: running the lint
        id: run_lint
        run: |
            npm i
            echo "running lint"
            echo "##[set-output name=lint_output;]$(npm run lint)"
      - name: forming log url
        id: log_url_with_status
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "setting status of node set up"
          echo ${{ job.status }}
          STATUS=${{ job.status }}
          echo "##[set-output name=status;]$STATUS"
            ./__scripts__/log_url.sh
  cypress-test:
    runs-on: ubuntu-latest
    needs: ['node-setup-lint-check']
    continue-on-error: true
    outputs:
      cypress_log_url: ${{ steps.cypress_log_url_with_status.outputs.log_url }}
      status: ${{ steps.cypress_log_url_with_status.outputs.status }}
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 0
      - name: Setup node 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: run cypress test
        run: |
          echo "running cypress test"
      - uses: cypress-io/github-action@v1
        with:
          install: false
          working-directory: e2e
      - name: output url
        id: cypress_log_url_with_status
        if: always()
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "setting status of cypress test"
          echo ${{ job.status }}
          STATUS=${{ job.status }}
          echo "##[set-output name=status;]$STATUS"
            ./__scripts__/log_url.sh

  # build run

  build:
    runs-on: ubuntu-latest
    needs: ['cypress-test']
    continue-on-error: false
    outputs:
      build_log_url: ${{ steps.build_log_url_with_status.outputs.log_url }}
      status: ${{ steps.build_log_url_with_status.outputs.status }}
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 0
      - name: Setup node 12
        uses: actions/setup-node@v1
        with:
            node-version: 12.x
      - name: runninng build
        if: ${{ success() }}
        run: |
          echo "inside build"
          npm i
          npm run build
      - name: output url
        id: build_log_url_with_status
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            echo "setting status of cypress test"
            echo ${{ job.status }}
            STATUS=${{ job.status }}
            echo "##[set-output name=status;]$STATUS"
              ./__scripts__/log_url.sh

#
  msteam:
    runs-on: ubuntu-latest
    needs: ['node-setup-lint-check','cypress-test','build']
    if : always()
    steps:
      - name: send message to teams
        id: send_message_to_team
        run: |
          echo ${{needs.node-setup-lint-check.outputs.lint_output}}
          WEBHOOK_URL='https://webhook.site/ef9498ad-328a-4367-8d7d-3023268e7c00'
          NODE_SETUP_LINT_URL=${{needs.node-setup-lint-check.outputs.logurl_node_setup}}
          NODE_SETUP_STATUS=${{needs.node-setup-lint-check.outputs.status}}
          CYPRESS_LOG_URL=${{needs.cypress-test.outputs.cypress_log_url}}
          CYPRESS_STATUS=${{needs.cypress-test.outputs.status}}
          BUILD_URL=${{needs.build.outputs.build_log_url}}
          BUILD_STATUS=${{needs.build.outputs.status}}
          BRANCH_NAME=${{needs.node-setup-lint-check.outputs.branch}}

          echo $BRANCH_NAME
          echo $NODE_SETUP_LINT_URL
          if [ $NODE_SETUP_STATUS == 'failure' ]
            then
               echo 'node set up and lint check is failed for branch '

               MESSAGE='node set up is failed. for the branch '"$BRANCH_NAME"'. Log can be found <a>  \
                 href='"$NODE_SETUP_LINT_URL"'> Log Url </a> \
                '

               curl -H 'Content-Type: application/json' -d '{"text": '"$MESSAGE"'}' \
                 $WEBHOOK_URL

            elif [ $CYPRESS_STATUS == 'failure' ]
            then
               echo 'Cypress test is failed for the branch '"$BRANCH_NAME"'. Log can be found <a>  \
                                        href='"$CYPRESS_LOG_URL"'> Log Url </a>'

               MESSAGE='Cypress test is failed for the branch '"$BRANCH_NAME"'. Log can be found <a>  \
                                                                href='"$CYPRESS_LOG_URL"'> Log Url </a>'

               curl -H 'Content-Type: application/json' -d '{"text": '"$MESSAGE"'}' \
                $WEBHOOK_URL

             elif [  $BUILD_STATUS == 'failure' ]
             then
                echo "build is failed for the branch '"$BRANCH_NAME"'. Log can be found <a>  \
                                                                              href='"$BUILD_URL"'> Log Url </a>"

                MESSAGE='build is failed for the branch '"$BRANCH_NAME"'. Log can be found <a>  \
                                                                                                       href='"$BUILD_URL"'> Log Url </a>'

                curl -H 'Content-Type: application/json' -d '{"text": '"$MESSAGE"'}' \
                $WEBHOOK_URL

            else
                echo "All the jobs are successful for branch"

                MESSAGE="All the jobs are passed for the branch '"$BRANCH_NAME"'."

                curl -H 'Content-Type: application/json' -d '{"text": '"$MESSAGE"'}'  \
                          $WEBHOOK_URL
          fi
